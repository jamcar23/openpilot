name: selfdrive
on:
  push:
    branches-ignore:
      - 'testing-closet*'
    paths-ignore:
      - '**.md'
      - 'README*'
  pull_request:
    paths-ignore:
      - '**.md'
      - 'README*'

env:
  UNIT_TEST: coverage run --append -m unittest discover

jobs:
  # TODO: once actions/cache supports read only mode, use the cache for all jobs
  build_release:
    name: build release
    runs-on: ubuntu-20.04
    timeout-minutes: 50
    env:
      STRIPPED_DIR: tmppilot
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Prepare CI Env Vars
      run: |
        chmod +x ./.github/scripts/ci_env_vars.sh
        source ./.github/scripts/ci_env_vars.sh
    - name: Strip non-release files
      run: |
        mkdir $STRIPPED_DIR
        cp -pR --parents $(cat release/files_common) $STRIPPED_DIR
        cp Dockerfile.openpilot_base Dockerfile.openpilotci $STRIPPED_DIR

        # need this to build on x86
        cp -pR --parents phonelibs/libyuv phonelibs/snpe selfdrive/modeld/runners $STRIPPED_DIR
        # need for CI build
        cd $STRIPPED_DIR
        mkdir laika laika_repo tools
        cd ..
    - name: Build Docker image
      run: eval "$BUILD_CMD"
    - name: Build openpilot and run checks
      run: |
          cd $STRIPPED_DIR
          ${{ env.RUN_CMD }} "cd /tmp/openpilot && \
                          python selfdrive/manager/build.py && \
                          python -m unittest discover selfdrive/car"

  static_analysis:
    name: static analysis
    runs-on: ubuntu-20.04
    timeout-minutes: 50
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Prepare CI Env Vars
      run: |
        chmod +x ./.github/scripts/ci_env_vars.sh
        source ./.github/scripts/ci_env_vars.sh
    - name: Build Docker image
      run: eval "$BUILD_CMD"
    - name: pre-commit
      run: ${{ env.RUN_CMD }} "cd /tmp/openpilot/ && git init && git add -A && pre-commit run --all"

  valgrind:
    name: valgrind
    runs-on: ubuntu-20.04
    timeout-minutes: 50
    env:
      LOG_FILE_PATH: selfdrive/test/valgrind_logs.txt
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Cache dependencies
      id: dependency-cache
      uses: actions/cache@v2
      with:
        path: /tmp/comma_download_cache
        key: ${{ hashFiles('.github/workflows/selfdrive_tests.yaml', 'selfdrive/test/test_valgrind_replay.py') }}
    - name: Prepare CI Env Vars
      run: |
        chmod +x ./.github/scripts/ci_env_vars.sh
        source ./.github/scripts/ci_env_vars.sh
    - name: Build Docker image
      run: eval "$BUILD_CMD"
    - name: Run valgrind
      run: |
        ${{ env.RUN_CMD }} "cd /tmp/openpilot && \
                        scons -j$(nproc) && \
                        FILEREADER_CACHE=1 python selfdrive/test/test_valgrind_replay.py"
    - name: Copy logs
      if: ${{ env.SHOULD_BUILD_DOCKER }}
      run: |
        docker cp ${{ env.TEMP_IMAGE }}:/tmp/openpilot/${{ env.LOG_FILE_PATH }} ${{ env.LOG_FILE_PATH }}
    - name: Print logs
      if: always()
      run: |
        cat ${{ env.LOG_FILE_PATH }}
    - uses: actions/upload-artifact@v2
      if: always()
      continue-on-error: true
      with:
        name: valgrind_logs.txt
        path: ${{ env.LOG_FILE_PATH }}

  unit_tests:
    name: unit tests
    runs-on: ubuntu-20.04
    timeout-minutes: 50
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Prepare CI Env Vars
      run: |
        chmod +x ./.github/scripts/ci_env_vars.sh
        source ./.github/scripts/ci_env_vars.sh
    - name: Build Docker image
      run: eval "$BUILD_CMD"
    - name: Run unit tests
      run: |
        ${{ env.RUN_CMD }} "cd /tmp/openpilot && \
                        scons -j$(nproc) --test && \
                        coverage run selfdrive/test/test_fingerprints.py && \
                        $UNIT_TEST common && \
                        $UNIT_TEST opendbc/can && \
                        $UNIT_TEST selfdrive/boardd && \
                        $UNIT_TEST selfdrive/controls && \
                        $UNIT_TEST selfdrive/monitoring && \
                        $UNIT_TEST selfdrive/loggerd && \
                        $UNIT_TEST selfdrive/car && \
                        $UNIT_TEST selfdrive/locationd && \
                        $UNIT_TEST selfdrive/athena && \
                        $UNIT_TEST selfdrive/thermald && \
                        $UNIT_TEST tools/lib/tests && \
                        ./selfdrive/camerad/test/ae_gray_test"
    - name: Upload coverage to Codecov
      run: bash <(curl -s https://codecov.io/bash) -v -F unit_tests

  process_replay:
    name: process replay
    runs-on: ubuntu-20.04
    timeout-minutes: 50
    env:
      LOG_FILE_PATH: selfdrive/test/process_replay/diff.txt
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
        lfs: true
    - name: Cache dependencies
      id: dependency-cache
      uses: actions/cache@v2
      with:
        path: /tmp/comma_download_cache
        key: ${{ hashFiles('.github/workflows/selfdrive_tests.yaml', 'selfdrive/test/process_replay/test_processes.py') }}
    - name: Prepare CI Env Vars
      run: |
        chmod +x ./.github/scripts/ci_env_vars.sh
        source ./.github/scripts/ci_env_vars.sh
    - name: Build Docker image
      run: eval "$BUILD_CMD"
    - name: Run replay
      run: |
        ${{ env.RUN_CMD }} "cd /tmp/openpilot && \
                        scons -j$(nproc) && \
                        FILEREADER_CACHE=1 CI=1 coverage run selfdrive/test/process_replay/test_processes.py --local"
    - name: Upload coverage to Codecov
      run: bash <(curl -s https://codecov.io/bash) -v -F process_replay
    - name: Copy logs
      if: ${{ env.SHOULD_BUILD_DOCKER }}
      run: |
        docker cp ${{ env.TEMP_IMAGE }}:/tmp/openpilot/${{ env.LOG_FILE_PATH }} ${{ env.LOG_FILE_PATH }}
    - name: Print diff
      if: always()
      run: |
        cat ${{ env.LOG_FILE_PATH }}
    - uses: actions/upload-artifact@v2
      if: always()
      continue-on-error: true
      with:
        name: process_replay_diff.txt
        path: ${{ env.LOG_FILE_PATH }}

  #model_replay:
  #  name: model replay
  #  runs-on: ubuntu-20.04
  #  timeout-minutes: 50
  #  steps:
  #  - uses: actions/checkout@v2
  #    with:
  #      submodules: true
  #  - name: Build Docker image
  #    run: eval "$BUILD"
  #  - name: Run replay
  #    run: |
  #      ${{ env.RUN }} "scons -j$(nproc) && \
  #                      selfdrive/test/process_replay/model_replay.py"

  test_longitudinal:
    name: longitudinal
    runs-on: ubuntu-20.04
    timeout-minutes: 50
    env:
      LOG_PATH: selfdrive/test/longitudinal_maneuvers/out/longitudinal/
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Prepare CI Env Vars
      run: |
        chmod +x ./.github/scripts/ci_env_vars.sh
        source ./.github/scripts/ci_env_vars.sh
    - name: Build Docker image
      run: eval "$BUILD_CMD"
    - name: Test longitudinal
      run: |
        ${{ env.RUN_CMD }} "mkdir -p /tmp/openpilot/selfdrive/test/out && \
                        cd /tmp/openpilot/ && \
                        scons -j$(nproc) && \
                        cd selfdrive/test/longitudinal_maneuvers && \
                        ./test_longitudinal.py"
    - name: Copy artifacts
      if: ${{ env.SHOULD_BUILD_DOCKER }}
      run: |
        mkdir -p ${{ env.LOG_PATH }}
        docker cp ${{ env.TEMP_IMAGE }}:/tmp/openpilot/${{ env.LOG_PATH }} ${{ env.LOG_PATH }}
    - uses: actions/upload-artifact@v2
      if: always()
      continue-on-error: true
      with:
        name: longitudinal
        path: ${{ env.LOG_PATH }}

  test_car_models:
    name: car models
    runs-on: ubuntu-20.04
    timeout-minutes: 50
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Cache dependencies
      id: dependency-cache
      uses: actions/cache@v2
      with:
        path: /tmp/comma_download_cache
        key: ${{ hashFiles('.github/workflows/selfdrive_tests.yaml', 'selfdrive/test/test_car_models.py') }}
    - name: Prepare CI Env Vars
      run: |
        chmod +x ./.github/scripts/ci_env_vars.sh
        source ./.github/scripts/ci_env_vars.sh
    - name: Build Docker image
      run: eval "$BUILD_CMD"
    - name: Test car models
      run: |
        ${{ env.RUN_CMD }} "cd /tmp/openpilot && \
                        scons -j$(nproc) && \
                        FILEREADER_CACHE=1 coverage run --parallel-mode -m nose --processes=4 --process-timeout=120 \
                                           selfdrive/test/test_models.py && \
                        coverage combine"
    - name: Upload coverage to Codecov
      run: bash <(curl -s https://codecov.io/bash) -v -F test_car_models

  wait_for_selfdrive:
    name: wait for selfdrive
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    steps:
    - name: Setup Env Vars
      run: |
        if [[ $GITHUB_EVENT_NAME = 'push' ]]; then
          echo 'WAIT_REF=${{ github.sha }}' >> $GITHUB_ENV
        else
          echo 'WAIT_REF=${{ github.head_ref }}' >> $GITHUB_ENV
        fi
    - name: Wait For Static Analysis
      uses: lewagon/wait-on-check-action@v0.2
      with:
        ref: ${{ env.WAIT_REF }}
        check-name: 'static analysis'
        wait-interval: 60
    - name: Wait For Valgrind
      uses: lewagon/wait-on-check-action@v0.2
      with:
        ref: ${{ env.WAIT_REF }}
        check-name: 'valgrind'
        wait-interval: 60
    - name: Wait For Build Release
      uses: lewagon/wait-on-check-action@v0.2
      with:
        ref: ${{ env.WAIT_REF }}
        check-name: 'build release'
        wait-interval: 60
    - name: Wait For Unit Tests
      uses: lewagon/wait-on-check-action@v0.2
      with:
        ref: ${{ env.WAIT_REF }}
        check-name: 'unit tests'
        wait-interval: 60
    - name: Wait For Car Models Tests
      uses: lewagon/wait-on-check-action@v0.2
      with:
        ref: ${{ env.WAIT_REF }}
        check-name: 'car models'
        wait-interval: 60
    - name: Wait For Longitudinal Tests
      uses: lewagon/wait-on-check-action@v0.2
      with:
        ref: ${{ env.WAIT_REF }}
        check-name: 'longitudinal'
        wait-interval: 60
    - name: Wait For Process Replay
      uses: lewagon/wait-on-check-action@v0.2
      with:
        ref: ${{ env.WAIT_REF }}
        check-name: 'process replay'
        wait-interval: 60

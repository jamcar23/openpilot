name: openpilot tests
on:
  push:
    branches-ignore:
      - 'testing-closet*'
    paths-ignore:
      - '**.md'
      - 'README*'
  pull_request:
    paths-ignore:
      - '**.md'
      - 'README*'

env:
  REPO: jamcar23/openpilot
  REGISTRY_BASE: ghcr.io
  MAIN_BRANCH: src
  TEMP_IMAGE: tmppilotci
  UNIT_TEST: coverage run --append -m unittest discover

jobs:
  setup_workflow:
    name: setup workflow
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    env:
      RUN_CMD_BASE: docker run --shm-size 1G -e PYTHONPATH=/tmp/openpilot -e GITHUB_ACTION -e GITHUB_REF -e GITHUB_HEAD_REF -e GITHUB_SHA -e GITHUB_REPOSITORY -e GITHUB_RUN_ID -v /tmp/comma_download_cache:/tmp/comma_download_cache
    outputs:
      is_default_repo: ${{ env.IS_DEFAULT }}
      is_main_branch: ${{ env.IS_MAIN }}
      should_build_docker: ${{ env.SHOULD_BUILD_DOCKER }}
      container_uri: ${{ env.URI }}
      base_image: ${{ env.BASE_IMAGE }}
      ci_image: ${{ env.CI_IMAGE }}
      fat_image: ${{ env.FAT_IMAGE }}
      docker_image: ${{ env.MAIN_IMAGE }}
      docker_build: ${{ env.BUILD_CMD }}
      docker_run: ${{ env.RUN_CMD }}
      docker_login: docker login ${{ env.REGISTRY_BASE }} -u jamcar23 -p 
    steps:
      - name: Set default repo
        # `&& true || ''` is a fake ternary op that actually evals to true and false
        # Needed because env vars are always strings (i.e. 'true' and 'false') and
        # non-empty strings are always true
        run: |
          echo "IS_DEFAULT=${{ github.repository == env.REPO && true || '' }}" >> $GITHUB_ENV
      - name: Set main branch
        run: |
          echo "IS_MAIN=${{ github.ref == format('refs/heads/{0}', env.MAIN_BRANCH) && true || '' }}" >> $GITHUB_ENV
      - name: Set container uri
        run: |
          echo "URI=${{ env.REGISTRY_BASE }}/${{ env.REPO }}/openpilot" >> $GITHUB_ENV
      - name: Set image uris
        run: |
          echo "BASE_IMAGE=${{ env.URI }}-base:latest" >> $GITHUB_ENV
          echo "CI_IMAGE=${{ env.URI }}ci:latest" >> $GITHUB_ENV
          echo "FAT_IMAGE=${{ env.URI }}-fat:latest" >> $GITHUB_ENV
      - name: Set should build docker
        run: |
          echo "SHOULD_BUILD_DOCKER=${{ github.event_name == 'push' && env.IS_DEFAULT && env.IS_MAIN && true || '' }}" >> $GITHUB_ENV
      - name: Create docker commands main branch
        id: docker_main_branch
        if: env.SHOULD_BUILD_DOCKER
        run: |
          echo "MAIN_IMAGE=${{ env.FAT_IMAGE }}" >> $GITHUB_ENV
          echo "BUILD_CMD=docker build -t ${{ env.BASE_IMAGE }} -f Dockerfile.openpilot_base . && docker build -t ${{ env.CI_IMAGE }} -f Dockerfile.openpilotci . && docker build -t ${{ env.FAT_IMAGE }} -f Dockerfile.openpilot_fat ." >> $GITHUB_ENV
          echo "RUN_CMD=${{ env.RUN_CMD_BASE }} --name ${{ env.TEMP_IMAGE }}" >> $GITHUB_ENV
      - name: Create docker commands other branch
        if: steps.docker_main_branch.outcome != 'success'
        run: |
          echo "MAIN_IMAGE=${{ env.CI_IMAGE }}" >> $GITHUB_ENV
          echo "BUILD_CMD=docker pull \$IMAGE" >> $GITHUB_ENV
          echo "RUN_CMD=${{ env.RUN_CMD_BASE }} -v $PWD:/tmp/openpilot --rm" >> $GITHUB_ENV
      - name: Finalize docker commands
        run: |
          echo "RUN_CMD=${{ env.RUN_CMD }} \$IMAGE /bin/sh -c" >> $GITHUB_ENV
      - name: Finish setup # At least one step is needed so just log that we're done
        run: echo "Finished workflow setup"

  build_release:
    name: build release
    runs-on: ubuntu-20.04
    timeout-minutes: 50
    needs: setup_workflow
    env:
      TEST_DIR: tmppilot
      BUILD: ${{ needs.setup_workflow.outputs.docker_build }}
      IMAGE: ${{ needs.setup_workflow.outputs.docker_image }}
      RUN: ${{ needs.setup_workflow.outputs.docker_run }}
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Strip non-release files
      run: |
        mkdir $TEST_DIR
        cp -pR --parents $(cat release/files_common) $TEST_DIR
        cp Dockerfile.openpilot_base Dockerfile.openpilotci $TEST_DIR

        # need this to build on x86
        cp -pR --parents phonelibs/libyuv phonelibs/snpe \
                          external/bin selfdrive/modeld/runners $TEST_DIR

        # need these so docker copy won't fail
        cp Pipfile Pipfile.lock .pylintrc .pre-commit-config.yaml $TEST_DIR
        cd $TEST_DIR
        mkdir laika laika_repo tools
    - name: Build Docker image
      run: eval "$BUILD"
    - name: Build openpilot and run quick check
      run: |
          cd $TEST_DIR
          ${{ env.RUN }} "cd /tmp/openpilot && \
                          scons -j$(nproc) && \
                          $UNIT_TEST selfdrive/car"

  build_mac:
    name: build macos
    runs-on: macos-10.15
    timeout-minutes: 60
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Cache dependencies
      id: dependency-cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.pyenv
          ~/Library/Caches/pip
          ~/Library/Caches/pipenv
          ~/Library/Caches/Homebrew
        key: ${{ hashFiles('tools/mac_setup.sh') }}
    - name: Install dependencies
      run: ./tools/mac_setup.sh
    - name: Build openpilot
      run: eval "$(pyenv init -)" && scons -j$(nproc)
    - name: Brew cleanup
      run: brew cleanup || true # keeps our cache small

  build_webcam:
    name: build webcam
    runs-on: ubuntu-20.04
    timeout-minutes: 90
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Build Docker image
      run: |
        docker pull docker.io/commaai/openpilotwebcamci:latest
        docker build --cache-from docker.io/commaai/openpilotwebcamci:latest -t tmppilotwebcam -f tools/webcam/Dockerfile .
    - name: Build openpilot
      run: docker run --shm-size 1G --rm tmppilotwebcam /bin/sh -c "cd /tmp/openpilot && USE_WEBCAM=1 scons -j$(nproc)"
    - name: Push to dockerhub
      if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request' && github.repository == 'commaai/openpilot'
      run: |
          docker login -u wmelching -p ${{ secrets.COMMA_DOCKERHUB_TOKEN}}
          docker tag tmppilotwebcam docker.io/commaai/openpilotwebcamci:latest
          docker push docker.io/commaai/openpilotwebcamci:latest

  docker_push:
    name: docker push
    runs-on: ubuntu-20.04
    timeout-minutes: 50
    needs: [setup_workflow, static_analysis, unit_tests, process_replay, test_longitudinal, test_car_models, build_release]
    if: needs.setup_workflow.outputs.should_build_docker
    env:
      LOGIN: ${{ needs.setup_workflow.outputs.docker_login }}
      BUILD: ${{ needs.setup_workflow.outputs.docker_build }}
      BASE_IMAGE: ${{ needs.setup_workflow.outputs.base_image }}
      CI_IMAGE: ${{ needs.setup_workflow.outputs.ci_image }}
      FAT_IMAGE: ${{ needs.setup_workflow.outputs.fat_image }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          lfs: true
      - name: Build Docker image
        run: eval "$BUILD"
      - name: Push to container registry
        run: |
          eval "$LOGIN ${{ secrets.PACKAGE_PAT }}"
          docker push ${{ env.BASE_IMAGE }}
          docker push ${{ env.CI_IMAGE }}
          docker push ${{ env.FAT_IMAGE }}
      - name: Docker Logout
        if: always()
        continue-on-error: true
        run: docker logout

  docker_push_prebuilt:
    name: docker push prebuilt
    runs-on: ubuntu-20.04
    timeout-minutes: 50
    needs: [setup_workflow, static_analysis, unit_tests, process_replay, test_longitudinal, test_car_models, build_release]
    if: needs.setup_workflow.outputs.should_build_docker
    env:
      URI: ${{ needs.setup_workflow.outputs.container_uri }}
      LOGIN: ${{ needs.setup_workflow.outputs.docker_login }}
      BUILD: ${{ needs.setup_workflow.outputs.docker_build }}
      FAT_IMAGE: ${{ needs.setup_workflow.outputs.fat_image }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          lfs: true
      - name: Build Docker image
        run: echo "RUN cd /tmp/openpilot && scons -c && scons -j\$(nproc)" >> Dockerfile.openpilot_fat && eval "$BUILD"
      - name: Push to container registry
        run: |
          eval "$LOGIN ${{ secrets.PACKAGE_PAT }}"
          docker tag ${{ env.FAT_IMAGE }} ${{ env.URI }}:latest
          docker push ${{ env.URI }}:latest
      - name: Docker Logout
        if: always()
        continue-on-error: true
        run: docker logout

  static_analysis:
    name: static analysis
    runs-on: ubuntu-20.04
    timeout-minutes: 50
    needs: setup_workflow
    env:
      BUILD: ${{ needs.setup_workflow.outputs.docker_build }}
      IMAGE: ${{ needs.setup_workflow.outputs.docker_image }}
      RUN: ${{ needs.setup_workflow.outputs.docker_run }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Build Docker image
        run: eval "$BUILD"
      - name: pre-commit
        run: ${{ env.RUN }} "cd /tmp/openpilot/ && git init && git add -A && pre-commit run --all"

  valgrind:
    name: valgrind
    runs-on: ubuntu-20.04
    timeout-minutes: 50
    needs: setup_workflow
    env:
      LOG_FILE_PATH: selfdrive/test/valgrind_logs.txt
      BUILD: ${{ needs.setup_workflow.outputs.docker_build }}
      IMAGE: ${{ needs.setup_workflow.outputs.docker_image }}
      RUN: ${{ needs.setup_workflow.outputs.docker_run }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Cache dependencies
        id: dependency-cache
        uses: actions/cache@v2
        with:
          path: |
            /tmp/comma_download_cache
          key: ${{ hashFiles('.github/workflows/test.yaml', 'selfdrive/test/test_valgrind_replay.py') }}
      - name: Build Docker image
        run: eval "$BUILD"
      - name: Run valgrind
        run: |
          ${{ env.RUN }} "cd /tmp/openpilot && \
                          scons -j$(nproc) && \
                          FILEREADER_CACHE=1 python selfdrive/test/test_valgrind_replay.py"
      - name: Copy logs
        if: needs.setup_workflow.outputs.should_build_docker
        run: |
          docker cp ${{ env.TEMP_IMAGE }}:/tmp/openpilot/${{ env.LOG_FILE_PATH }} ${{ env.LOG_FILE_PATH }}
      - name: Print logs
        if: always()
        run: |
          cat ${{ env.LOG_FILE_PATH }}
      - uses: actions/upload-artifact@v2
        if: always()
        continue-on-error: true
        with:
          name: valgrind_logs.txt
          path: ${{ env.LOG_FILE_PATH }}

  unit_tests:
    name: unit tests
    runs-on: ubuntu-20.04
    timeout-minutes: 50
    needs: setup_workflow
    env:
      BUILD: ${{ needs.setup_workflow.outputs.docker_build }}
      IMAGE: ${{ needs.setup_workflow.outputs.docker_image }}
      RUN: ${{ needs.setup_workflow.outputs.docker_run }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Build Docker image
        run: eval "$BUILD"
      - name: Run unit tests
        run: |
          ${{ env.RUN }} "cd /tmp/openpilot && \
                          scons -j$(nproc) && \
                          coverage run selfdrive/test/test_fingerprints.py && \
                          $UNIT_TEST common && \
                          $UNIT_TEST opendbc/can && \
                          $UNIT_TEST selfdrive/boardd && \
                          $UNIT_TEST selfdrive/controls && \
                          $UNIT_TEST selfdrive/monitoring && \
                          $UNIT_TEST selfdrive/loggerd && \
                          $UNIT_TEST selfdrive/car && \
                          $UNIT_TEST selfdrive/locationd && \
                          $UNIT_TEST selfdrive/athena && \
                          $UNIT_TEST selfdrive/thermald && \
                          $UNIT_TEST tools/lib/tests"
      # - name: Upload coverage to Codecov
      #   run: |
      #     docker commit tmppilot tmppilotci
      #     $CI_RUN "cd /tmp/openpilot && bash <(curl -s https://codecov.io/bash) -v -F unit_tests"

  process_replay:
    name: process replay
    runs-on: ubuntu-20.04
    timeout-minutes: 50
    needs: setup_workflow
    env:
      LOG_FILE_PATH: selfdrive/test/process_replay/diff.txt
      BUILD: ${{ needs.setup_workflow.outputs.docker_build }}
      IMAGE: ${{ needs.setup_workflow.outputs.docker_image }}
      RUN: ${{ needs.setup_workflow.outputs.docker_run }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          lfs: true
      - name: Cache dependencies
        id: dependency-cache
        uses: actions/cache@v2
        with:
          path: |
            /tmp/comma_download_cache
          key: ${{ hashFiles('.github/workflows/test.yaml', 'selfdrive/test/process_replay/test_processes.py') }}
      - name: Build Docker image
        run: eval "$BUILD"
      - name: Run replay
        run: |
          ${{ env.RUN }} "cd /tmp/openpilot && \
                          scons -j$(nproc) && \
                          FILEREADER_CACHE=1 CI=1 coverage run selfdrive/test/process_replay/test_processes.py --local"
      # - name: Upload coverage to Codecov
      #   run: |
      #     docker commit tmppilot tmppilotci
      #     $CI_RUN "cd /tmp/openpilot && bash <(curl -s https://codecov.io/bash) -v -F process_replay"
      - name: Copy logs
        if: needs.setup_workflow.outputs.should_build_docker
        run: |
          docker cp ${{ env.TEMP_IMAGE }}:/tmp/openpilot/${{ env.LOG_FILE_PATH }} ${{ env.LOG_FILE_PATH }}
      - name: Print diff
        if: always()
        run: |
          cat ${{ env.LOG_FILE_PATH }}
      - uses: actions/upload-artifact@v2
        if: always()
        continue-on-error: true
        with:
          name: process_replay_diff.txt
          path: ${{ env.LOG_FILE_PATH }}

  test_longitudinal:
    name: longitudinal
    runs-on: ubuntu-20.04
    timeout-minutes: 50
    needs: setup_workflow
    env:
      LOG_PATH: selfdrive/test/longitudinal_maneuvers/out/longitudinal/
      BUILD: ${{ needs.setup_workflow.outputs.docker_build }}
      IMAGE: ${{ needs.setup_workflow.outputs.docker_image }}
      RUN: ${{ needs.setup_workflow.outputs.docker_run }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Build Docker image
        run: eval "$BUILD"
      - name: Test longitudinal
        run: |
          ${{ env.RUN }} "mkdir -p /tmp/openpilot/selfdrive/test/out && \
                          cd /tmp/openpilot/ && \
                          scons -j$(nproc) && \
                          cd selfdrive/test/longitudinal_maneuvers && \
                          OPTEST=1 ./test_longitudinal.py"
      - name: Copy artifacts
        if: needs.setup_workflow.outputs.should_build_docker
        run: |
          mkdir -p ${{ env.LOG_PATH }}
          docker cp ${{ env.TEMP_IMAGE }}:/tmp/openpilot/${{ env.LOG_PATH }} ${{ env.LOG_PATH }}
      - uses: actions/upload-artifact@v2
        if: always()
        continue-on-error: true
        with:
          name: longitudinal
          path: ${{ env.LOG_PATH }}

  test_car_models:
    name: test car models
    runs-on: ubuntu-20.04
    timeout-minutes: 50
    needs: setup_workflow
    env:
      BUILD: ${{ needs.setup_workflow.outputs.docker_build }}
      IMAGE: ${{ needs.setup_workflow.outputs.docker_image }}
      RUN: ${{ needs.setup_workflow.outputs.docker_run }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Cache dependencies
        id: dependency-cache
        uses: actions/cache@v2
        with:
          path: |
            /tmp/comma_download_cache
          key: ${{ hashFiles('.github/workflows/test.yaml', 'selfdrive/test/test_car_models.py') }}
      - name: Build Docker image
        run: eval "$BUILD"
      - name: Test car models
        run: |
          ${{ env.RUN }} "cd /tmp/openpilot && \
                    scons -j$(nproc) && \
                    FILEREADER_CACHE=1 coverage run --parallel-mode -m nose --processes=4 --process-timeout=60 \
                                 selfdrive/test/test_models.py && \
                    coverage combine"
      # - name: Upload coverage to Codecov
      #   run: |
      #     docker commit tmppilot tmppilotci
      #     $CI_RUN "cd /tmp/openpilot && bash <(curl -s https://codecov.io/bash) -v -F test_car_models"

  github_push_prebuilt:
    name: github push prebuilt
    runs-on: ubuntu-20.04
    timeout-minutes: 50
    needs: [setup_workflow, static_analysis, unit_tests, process_replay, test_longitudinal, test_car_models, build_release]
    if: needs.setup_workflow.outputs.is_default_repo
    env:
      BRANCH: ''
      TARGET_DIR: tmp_op_ci
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          lfs: true
      - name: Prepare PR CI Build
        id: ci_build
        if: needs.setup_workflow.outputs.is_main_branch == '' && github.event_name == 'pull_request'
        run: |
          echo "BRANCH=${{ github.head_ref }}-ci" >> $GITHUB_ENV
      - name: Prepare Release CI Build
        id: r2_build
        if: needs.setup_workflow.outputs.is_main_branch && github.event_name == 'push'
        run: |
          echo "BRANCH=r2++" >> $GITHUB_ENV
      - name: Prepare release files
        if: steps.r2_build.outcome == 'success' || steps.ci_build.outcome == 'success'
        run: |
          chmod +x release/build_release_ci.sh
          ./release/build_release_ci.sh
      - name: Push changes
        if: steps.r2_build.outcome == 'success' || steps.ci_build.outcome == 'success'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ env.BRANCH }}
          directory: ${{ env.TARGET_DIR }}
          force: true
